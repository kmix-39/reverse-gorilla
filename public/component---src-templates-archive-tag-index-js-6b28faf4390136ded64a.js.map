{"version":3,"sources":["webpack:///./src/templates/archive/tag/index.js"],"names":["TagArchiveTemplate","props","location","data","pageContext","tagName","currentPage","canonical","totalPage","prevPagePath","nextPagePath","hasPrevPage","hasNextPage","tagData","AllTagContentQuery","find","tagContentData","node","fields","name","useState","isOpenMenu","setIsOpenMenu","isOpenSearch","setIsOpenSearch","isDarkMode","setIsDarkMode","pageTitle","frontmatter","title","pageDescription","description","pageValues","pathname","breadcrumbItems","label","url","icon","faHome","faTags","faTag","Provider","value","pattern","className","allMdx","edges","map","edge","item","key","id","current","max","parentPath","prevPath","nextPath","hasPrev","hasNext"],"mappings":"6FAAA,kJAgBaA,EAAqB,SAAAC,GAAU,IACnCC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,YAGvBC,EAQGD,EARHC,QACAC,EAOGF,EAPHE,YACAC,EAMGH,EANHG,UACAC,EAKGJ,EALHI,UACAC,EAIGL,EAJHK,aACAC,EAGGN,EAHHM,aACAC,EAEGP,EAFHO,YACAC,EACGR,EADHQ,YAKKC,EAFoBC,cAEQC,MACjC,SAAAC,GAAc,OAAIA,EAAeC,KAAKC,OAAOC,OAASd,KAjBb,EAoBNe,oBAAS,GAAtCC,EApBmC,KAoBvBC,EApBuB,OAqBFF,oBAAS,GAA1CG,EArBmC,KAqBrBC,EArBqB,OAsBNJ,mBAAS,MAAtCK,EAtBmC,KAsBvBC,EAtBuB,KAwBpCC,EAAS,MAASd,EAAQI,KAAKW,YAAYC,MAC3CC,EAAkBjB,EAAQI,KAAKW,YAAYG,YAE3CC,EAAa,CAClBH,MAAOF,EACPI,YAAaD,EACb5B,SAAUA,EAAS+B,SACnB1B,UAAWA,EACX2B,gBAAiB,CAChB,CAAEC,MAAO,MAAOC,IAAK,IAAKC,KAAMC,KAChC,CAAEH,MAAO,OAAQC,IAAK,SAAUC,KAAME,KACtC,CAAEJ,MAAOR,EAAWS,IAAKlC,EAAS+B,SAAUI,KAAMG,MAEnDnB,WAAYA,EACZC,cAAeA,EACfC,aAAcA,EACdC,gBAAiBA,EACjBC,WAAYA,EACZC,cAAeA,GAGhB,OACC,YAAC,IAAWe,SAAZ,CAAqBC,MAAOV,GAC3B,YAAC,IAAD,MACA,YAAC,IAAD,CAAQW,QAAQ,cACf,YAAC,IAAD,CAAaN,KAAMG,KAAQb,GAC3B,iBAAGiB,UAAU,QAAQd,GACrB,uBAASc,UAAU,QAClB,YAAC,IAAD,KACEzC,EAAK0C,OAAOC,MAAMC,KAAI,SAAAC,GACtB,OAAO,YAAC,IAAD,CAAiBC,KAAMD,EAAME,IAAKF,EAAK/B,KAAKkC,SAGrD,YAAC,IAAD,CACCC,QAAS9C,EACT+C,IAAK7C,EACL8C,WAAU,QAAUjD,EAAV,IACVkD,SAAU9C,EACV+C,SAAU9C,EACV+C,QAAS9C,EACT+C,QAAS9C,QAYAZ","file":"component---src-templates-archive-tag-index-js-6b28faf4390136ded64a.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { faHome, faTag, faTags } from '@fortawesome/free-solid-svg-icons'\n\nimport { AppContext } from '@src-components/contexts'\nimport { SEO, Layout } from '@src-components/foundations'\nimport {\n\tArticleList,\n\tArticleListItem,\n\tPageHeading,\n\tPager,\n} from '@src-components/parts'\n\nimport { AllTagContentQuery } from '@src-queries'\n\nexport const TagArchiveTemplate = props => {\n\tconst { location, data, pageContext } = props\n\n\tconst {\n\t\ttagName,\n\t\tcurrentPage,\n\t\tcanonical,\n\t\ttotalPage,\n\t\tprevPagePath,\n\t\tnextPagePath,\n\t\thasPrevPage,\n\t\thasNextPage,\n\t} = pageContext\n\n\tconst allTagContentData = AllTagContentQuery()\n\n\tconst tagData = allTagContentData.find(\n\t\ttagContentData => tagContentData.node.fields.name === tagName\n\t)\n\n\tconst [isOpenMenu, setIsOpenMenu] = useState(false)\n\tconst [isOpenSearch, setIsOpenSearch] = useState(false)\n\tconst [isDarkMode, setIsDarkMode] = useState(null)\n\n\tconst pageTitle = `タグ：${tagData.node.frontmatter.title}`\n\tconst pageDescription = tagData.node.frontmatter.description\n\n\tconst pageValues = {\n\t\ttitle: pageTitle,\n\t\tdescription: pageDescription,\n\t\tlocation: location.pathname,\n\t\tcanonical: canonical,\n\t\tbreadcrumbItems: [\n\t\t\t{ label: 'ホーム', url: '/', icon: faHome },\n\t\t\t{ label: 'タグ一覧', url: '/tags/', icon: faTags },\n\t\t\t{ label: pageTitle, url: location.pathname, icon: faTag },\n\t\t],\n\t\tisOpenMenu: isOpenMenu,\n\t\tsetIsOpenMenu: setIsOpenMenu,\n\t\tisOpenSearch: isOpenSearch,\n\t\tsetIsOpenSearch: setIsOpenSearch,\n\t\tisDarkMode: isDarkMode,\n\t\tsetIsDarkMode: setIsDarkMode,\n\t}\n\n\treturn (\n\t\t<AppContext.Provider value={pageValues}>\n\t\t\t<SEO />\n\t\t\t<Layout pattern=\"one-column\">\n\t\t\t\t<PageHeading icon={faTag}>{pageTitle}</PageHeading>\n\t\t\t\t<p className=\"mt-8\">{pageDescription}</p>\n\t\t\t\t<section className=\"mt-8\">\n\t\t\t\t\t<ArticleList>\n\t\t\t\t\t\t{data.allMdx.edges.map(edge => {\n\t\t\t\t\t\t\treturn <ArticleListItem item={edge} key={edge.node.id} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ArticleList>\n\t\t\t\t\t<Pager\n\t\t\t\t\t\tcurrent={currentPage}\n\t\t\t\t\t\tmax={totalPage}\n\t\t\t\t\t\tparentPath={`/tag/${tagName}/`}\n\t\t\t\t\t\tprevPath={prevPagePath}\n\t\t\t\t\t\tnextPath={nextPagePath}\n\t\t\t\t\t\thasPrev={hasPrevPage}\n\t\t\t\t\t\thasNext={hasNextPage}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</Layout>\n\t\t</AppContext.Provider>\n\t)\n}\n\nTagArchiveTemplate.propTypes = {\n\tpageContext: PropTypes.object,\n}\n\nexport default TagArchiveTemplate\n\nexport const pageQuery = graphql`\n\tquery($tagName: String!, $limit: Int!, $offset: Int!) {\n\t\tallMdx(\n\t\t\tlimit: $limit\n\t\t\tskip: $offset\n\t\t\tsort: { fields: [frontmatter___modifiedTime], order: DESC }\n\t\t\tfilter: {\n\t\t\t\tfrontmatter: { tags: { in: [$tagName] }, draft: { ne: true } }\n\t\t\t\tfields: { type: { eq: \"post\" } }\n\t\t\t}\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\tthumbnail\n\t\t\t\t\t\tcategories\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tpublishTime\n\t\t\t\t\t\tmodifiedTime\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n"],"sourceRoot":""}